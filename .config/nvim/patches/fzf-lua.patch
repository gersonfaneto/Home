diff --git a/lua/fzf-lua/providers/buffers.lua b/lua/fzf-lua/providers/buffers.lua
index 300d2f3..0e037a8 100644
--- a/lua/fzf-lua/providers/buffers.lua
+++ b/lua/fzf-lua/providers/buffers.lua
@@ -69,7 +69,8 @@ local getbuf = function(buf)
   return {
     bufnr = buf,
     flag = (buf == core.CTX().bufnr and "%")
-        or (buf == core.CTX().alt_bufnr and "#") or " ",
+        or (buf == core.CTX().alt_bufnr and "#")
+        or " ",
     info = utils.getbufinfo(buf),
     readonly = vim.bo[buf].readonly
   }
@@ -88,9 +89,9 @@ local get_unixtime = function(buf)
     -- When called from `buffer_lines`
     buf = getbuf(buf)
   end
-  if buf.flag == "%" then
+  if buf.flag:match("%%") then
     return _FUTURE
-  elseif buf.flag == "#" then
+  elseif buf.flag:match("#") then
     return _FUTURE - 1
   else
     return buf.info.lastused
@@ -126,11 +127,10 @@ end
 
 
 local function gen_buffer_entry(opts, buf, max_bufnr, cwd, prefix)
-  -- local hidden = buf.info.hidden == 1 and 'h' or 'a'
-  local hidden = ""
-  local readonly = buf.readonly and "=" or " "
-  local changed = buf.info.changed == 1 and "+" or " "
-  local flags = hidden .. readonly .. changed
+  -- if opts.buf_flags is set, buf.flag already includes all the flag
+  -- we need, so don't add extra flags here
+  local flags = opts.buf_flags and ""
+      or ((buf.readonly and "=" or " ") .. (buf.info.changed == 1 and "+" or " "))
   local leftbr = "["
   local rightbr = "]"
   local bufname = (function()
@@ -146,12 +146,12 @@ local function gen_buffer_entry(opts, buf, max_bufnr, cwd, prefix)
         { cwd = cwd or opts.cwd or uv.cwd(), file_icons = false, git_icons = false }))
     end
   end)()
-  if buf.flag == "%" then
+  if buf.flag:match("%%") then
     flags = utils.ansi_codes[opts.hls.buf_flag_cur](buf.flag) .. flags
-  elseif buf.flag == "#" then
+  elseif buf.flag:match("#") then
     flags = utils.ansi_codes[opts.hls.buf_flag_alt](buf.flag) .. flags
   else
-    flags = utils.nbsp .. flags
+    flags = buf.flag .. flags
   end
   local bufnrstr = string.format("%s%s%s", leftbr,
     utils.ansi_codes[opts.hls.buf_nr](tostring(buf.bufnr)), rightbr)
@@ -184,7 +184,26 @@ M.buffers = function(opts)
 
   opts.__fn_reload = opts.__fn_reload or function(_)
     return function(cb)
-      local filtered, _, max_bufnr = filter_buffers(opts, core.CTX().buflist)
+      local buflist = {}
+      if not opts.ls_cmd then
+        buflist = core.CTX().buflist
+      else -- use `:ls` output as buffer list
+        -- use buffer flags from `:ls` output instead of generating
+        -- new buffer flags in `populate_buffer_entries()`
+        opts.buf_flags = {}
+        local alt_win = vim.fn.win_getid(vim.fn.winnr("#"))
+        -- call ls command in alternate window to get correct buffer flags
+        -- for current and alternate buffers ('%' and '#')
+        local ls_output = vim.split(vim.api.nvim_win_call(alt_win, function()
+          return vim.fn.execute(opts.ls_cmd)
+        end), "\n", { trimempty = true })
+        for _, line in ipairs(ls_output) do
+          local bufnr = tonumber(line:match("^%s*(%d+)"))
+          table.insert(buflist, bufnr)
+          opts.buf_flags[bufnr] = line:match("^%s*%d+([^\"]*)")
+        end
+      end
+      local filtered, _, max_bufnr = filter_buffers(opts, buflist)
 
       if next(filtered) then
         local buffers = populate_buffer_entries(opts, filtered)
diff --git a/lua/fzf-lua/providers/nvim.lua b/lua/fzf-lua/providers/nvim.lua
index 9391ba5..3053975 100644
--- a/lua/fzf-lua/providers/nvim.lua
+++ b/lua/fzf-lua/providers/nvim.lua
@@ -127,7 +127,7 @@ end
 M.search_history = function(opts)
   opts = config.normalize_opts(opts, "search_history")
   if not opts then return end
-  if opts.fzf_opts["--header"] == nil then
+  if opts.headers then
     opts = core.set_header(opts, opts.headers)
   end
   history(opts, "search")
diff --git a/lua/fzf-lua/win.lua b/lua/fzf-lua/win.lua
index 72e9fcd..6edadb4 100644
--- a/lua/fzf-lua/win.lua
+++ b/lua/fzf-lua/win.lua
@@ -1662,10 +1662,10 @@ function FzfWin.toggle_help()
     style = "minimal",
     width = vim.o.columns,
     height = height,
-    row = vim.o.lines - height - vim.o.cmdheight - 2,
+    row = 0,
     col = 1,
     -- top border only
-    border = { " ", "â”€", " ", " ", " ", " ", " ", " " },
+    border = "single",
     -- topmost popup (+2 for float border empty/full)
     zindex = self.winopts.zindex + 2,
   }
